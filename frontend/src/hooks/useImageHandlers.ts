import React from 'react';
import { useUIStore } from '../stores/uiStore';
import { downloadBase64Image } from '../utils/downloadUtils';
import { googleAIService } from '../services/googleAIService';
import { AIProvider } from '../types/ai';
import ImageStorageService from '../services/imageStorageService';

export const useImageHandlers = (
  generatedCharacters: any[],
  setGeneratedCharacters: React.Dispatch<React.SetStateAction<any[]>>,
  generatedBackgrounds: any[],
  setGeneratedBackgrounds: React.Dispatch<React.SetStateAction<any[]>>,
  generatedSettingCuts: any[],
  setGeneratedSettingCuts: React.Dispatch<React.SetStateAction<any[]>>,
  generatedProjectData: any,
  imageGenerationAPI: AIProvider = 'google',
  aspectRatio: string = '16:9',
  imageOptions?: {
    imageStyle: string;
    imageQuality: string;
    numberOfImages: number;
  },
  currentProjectId?: string,
  globalImageSettings?: {
    quality: 'standard' | 'high' | 'ultra';
    aspectRatio: '16:9' | '9:16' | '2:3' | '1:1' | 'free';
  }
) => {
  const { addNotification } = useUIStore();
  const imageStorageService = ImageStorageService.getInstance();
  
  // ÎÇòÎÖ∏ Î∞îÎÇòÎÇò ÏÑúÎπÑÏä§Îäî Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå (Google AIÎßå ÏÇ¨Ïö©)

  // ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö© Ìï®Ïàò (Î≥∏Î¨∏ ÏÑ§Ï†ï Ïö∞ÏÑ†)
  const applySettingsPriority = () => {
    // Î≥∏Î¨∏ ÏÑ§Ï†ïÏù¥ ÏûàÏúºÎ©¥ Ïö∞ÏÑ† Ï†ÅÏö©, ÏóÜÏúºÎ©¥ ÏÉÅÎã® Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÇ¨Ïö©
    const finalAspectRatio = aspectRatio || globalImageSettings?.aspectRatio || '16:9';
    const finalQuality = imageOptions?.imageQuality || globalImageSettings?.quality || 'high';
    const finalStyle = imageOptions?.imageStyle || 'realistic';
    const finalNumberOfImages = imageOptions?.numberOfImages || 1;

    // ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ ÏïàÎÇ¥ Î©îÏãúÏßÄ
    if (aspectRatio && globalImageSettings?.aspectRatio && aspectRatio !== globalImageSettings.aspectRatio) {
      console.log('üìã ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ: Î≥∏Î¨∏ ÏÑ§Ï†ïÏù¥ ÏÉÅÎã® Í∏∞Î≥∏ ÏÑ§Ï†ïÎ≥¥Îã§ Ïö∞ÏÑ† Ï†ÅÏö©Îê©ÎãàÎã§.');
      console.log(`   Î≥∏Î¨∏ ÎπÑÏú®: ${aspectRatio}, ÏÉÅÎã® Í∏∞Î≥∏ ÎπÑÏú®: ${globalImageSettings.aspectRatio}`);
    }
    if (imageOptions?.imageQuality && globalImageSettings?.quality && imageOptions.imageQuality !== globalImageSettings.quality) {
      console.log('üìã ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ: Î≥∏Î¨∏ ÏÑ§Ï†ïÏù¥ ÏÉÅÎã® Í∏∞Î≥∏ ÏÑ§Ï†ïÎ≥¥Îã§ Ïö∞ÏÑ† Ï†ÅÏö©Îê©ÎãàÎã§.');
      console.log(`   Î≥∏Î¨∏ ÌíàÏßà: ${imageOptions.imageQuality}, ÏÉÅÎã® Í∏∞Î≥∏ ÌíàÏßà: ${globalImageSettings.quality}`);
    }

    return {
      aspectRatio: finalAspectRatio,
      quality: finalQuality,
      style: finalStyle,
      numberOfImages: finalNumberOfImages
    };
  };

  // ÌÜµÌï© Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ìï®Ïàò (Google AIÎßå ÏÇ¨Ïö©) - Îã®Ïùº Ïù¥ÎØ∏ÏßÄ Î∞òÌôò
  const generateImageWithAPI = async (prompt: string, attachedImages: File[], type: 'character' | 'background' | 'setting' | 'settingCut') => {
    console.log('üöÄ generateImageWithAPI Ìò∏Ï∂ú:', { prompt, attachedImages: attachedImages.length, type, imageGenerationAPI, aspectRatio, imageOptions });
    
    // ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö©
    const settings = applySettingsPriority();
    console.log('‚öôÔ∏è Ï†ÅÏö©Îêú ÏÑ§Ï†ï:', settings);
    
    // Ïù¥ÎØ∏ÏßÄ ÏòµÏÖòÏù¥ ÏûàÏúºÎ©¥ ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ï∂îÍ∞Ä
    let enhancedPrompt = prompt;
    if (imageOptions) {
      const stylePrompt = `Style: ${settings.style}`;
      const qualityPrompt = `Quality: ${settings.quality}`;
      
      enhancedPrompt = `${prompt}\n\n${stylePrompt}\n${qualityPrompt}`;
      console.log('üé® Ïù¥ÎØ∏ÏßÄ ÏòµÏÖò Ï†ÅÏö©Îêú ÌîÑÎ°¨ÌîÑÌä∏:', enhancedPrompt);
    }
    
    // Google AI ÏÑúÎπÑÏä§ ÏÇ¨Ïö©
    console.log('üîç Google AI ÏÑúÎπÑÏä§ ÏÇ¨Ïö©');
    const numberOfImages = settings.numberOfImages;
    
    if (attachedImages.length > 0) {
      console.log('üì∑ Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄÏôÄ Ìï®Íªò ÏÉùÏÑ± (Îã®Ïùº Ïù¥ÎØ∏ÏßÄÎßå ÏßÄÏõê)');
      // Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Í∏∞Ï°¥ Îã®Ïùº Ïù¥ÎØ∏ÏßÄ Ìï®Ïàò ÏÇ¨Ïö©
      switch (type) {
        case 'character':
          return await googleAIService.generateWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
        case 'background':
          return await googleAIService.generateBackgroundWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
        case 'setting':
        case 'settingCut':
          return await googleAIService.generateSettingCutWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
        default:
          throw new Error(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖ: ${type}`);
      }
    } else {
      console.log('üìù ÌÖçÏä§Ìä∏ÎßåÏúºÎ°ú ÏÉùÏÑ±');
      // ÌÖçÏä§Ìä∏ÎßåÏúºÎ°ú ÏÉùÏÑ±
      switch (type) {
        case 'character':
          return await googleAIService.generateCharacterImage(enhancedPrompt, settings.aspectRatio, numberOfImages);
        case 'background':
          return await googleAIService.generateBackgroundImage(enhancedPrompt, settings.aspectRatio, numberOfImages);
        case 'setting':
        case 'settingCut':
          return await googleAIService.generateSettingCutImage(enhancedPrompt, settings.aspectRatio, numberOfImages);
        default:
          throw new Error(`ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖ: ${type}`);
      }
    }
  };

  // ÌÜµÌï© Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ìï®Ïàò (Google AIÎßå ÏÇ¨Ïö©) - Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄ Î∞òÌôò
  const generateMultipleImagesWithAPI = async (prompt: string, attachedImages: File[], type: 'character' | 'background' | 'setting' | 'settingCut') => {
    console.log('üöÄ generateMultipleImagesWithAPI Ìò∏Ï∂ú:', { prompt, attachedImages: attachedImages.length, type, imageGenerationAPI, aspectRatio, imageOptions });
    
    // ÏÑ§Ï†ï Ïö∞ÏÑ†ÏàúÏúÑ Ï†ÅÏö©
    const settings = applySettingsPriority();
    console.log('‚öôÔ∏è Ï†ÅÏö©Îêú ÏÑ§Ï†ï:', settings);
    
    // Ïù¥ÎØ∏ÏßÄ ÏòµÏÖòÏù¥ ÏûàÏúºÎ©¥ ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ï∂îÍ∞Ä
    let enhancedPrompt = prompt;
    if (imageOptions) {
      const stylePrompt = `Style: ${settings.style}`;
      const qualityPrompt = `Quality: ${settings.quality}`;
      
      enhancedPrompt = `${prompt}\n\n${stylePrompt}\n${qualityPrompt}`;
      console.log('üé® Ïù¥ÎØ∏ÏßÄ ÏòµÏÖò Ï†ÅÏö©Îêú ÌîÑÎ°¨ÌîÑÌä∏:', enhancedPrompt);
    }
    
    // Google AI ÏÑúÎπÑÏä§ ÏÇ¨Ïö©
    console.log('üîç Google AI ÏÑúÎπÑÏä§ ÏÇ¨Ïö©');
    const numberOfImages = settings.numberOfImages;
    
    if (attachedImages.length > 0) {
      console.log('üì∑ Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄÏôÄ Ìï®Íªò ÏÉùÏÑ± (Îã®Ïùº Ïù¥ÎØ∏ÏßÄÎßå ÏßÄÏõê)');
      // Ï≤®Î∂Ä Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ Í∏∞Ï°¥ Îã®Ïùº Ïù¥ÎØ∏ÏßÄ Ìï®Ïàò ÏÇ¨Ïö©
      switch (type) {
        case 'character':
          const singleImage = await googleAIService.generateWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
          return [singleImage];
        case 'background':
          const singleBgImage = await googleAIService.generateBackgroundWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
          return [singleBgImage];
        case 'setting':
        case 'settingCut':
          const singleSettingImage = await googleAIService.generateSettingCutWithImage(attachedImages[0], enhancedPrompt, settings.aspectRatio);
          return [singleSettingImage];
      }
    } else {
      console.log('üìù ÌÖçÏä§Ìä∏ÎßåÏúºÎ°ú Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±');
      switch (type) {
        case 'character':
          return await googleAIService.generateMultipleCharacterImages(enhancedPrompt, settings.aspectRatio, numberOfImages);
        case 'background':
          return await googleAIService.generateMultipleBackgroundImages(enhancedPrompt, settings.aspectRatio, numberOfImages);
        case 'setting':
        case 'settingCut':
          return await googleAIService.generateMultipleSettingCutImages(enhancedPrompt, settings.aspectRatio, numberOfImages);
      }
    }
  };

  const handleGenerateCharacter = async (characterInput: string, attachedImages: File[]) => {
    console.log('üé≠ Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ± ÏãúÏûë:', { characterInput, attachedImages: attachedImages.length, imageGenerationAPI });
    
    if (!characterInput.trim() && attachedImages.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÍ±∞ÎÇò Ïù¥ÎØ∏ÏßÄÎ•º Ï≤®Î∂ÄÌï¥Ï£ºÏÑ∏Ïöî.',
      });
      return null;
    }

    try {
      let imagePrompt = characterInput;
      if (generatedProjectData?.imagePrompts?.character) {
        imagePrompt = generatedProjectData.imagePrompts.character;
        console.log('üìù ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï∫êÎ¶≠ÌÑ∞ ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©:', imagePrompt);
      } else if (generatedProjectData?.characterPrompt) {
        imagePrompt = generatedProjectData.characterPrompt;
        console.log('üìù ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï∫êÎ¶≠ÌÑ∞ ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©:', imagePrompt);
      } else {
        console.log('üìù ÏÇ¨Ïö©Ïûê ÏûÖÎ†• ÏÇ¨Ïö©:', imagePrompt);
      }
      
      console.log('üîÑ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± API Ìò∏Ï∂ú ÏãúÏûë...');
      const imageResults = await generateMultipleImagesWithAPI(imagePrompt, attachedImages, 'character');
      console.log('‚úÖ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏôÑÎ£å:', imageResults ? `${imageResults.length}Í∞ú Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±` : 'Ïã§Ìå®');
      
      // Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÅÍ∞Å Ï∫êÎ¶≠ÌÑ∞Î°ú Ï∂îÍ∞Ä (Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ï†ïÏ±Ö Ï†ÅÏö©)
      const newCharacters = await Promise.all(imageResults.map(async (imageResult, index) => {
        const characterId = Date.now() + index;
        
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§Ïóê Ï†ÄÏû•
        const storedImageId = await imageStorageService.storeImage(
          currentProjectId || 'default',
          'character',
          imageResult,
          {
            description: characterInput,
            attachedImages: attachedImages.length,
            generatedAt: new Date().toISOString()
          }
        );
        
        return {
          id: characterId,
          description: characterInput,
          image: imageResult,
          imageStorageId: storedImageId,
          attachedImages: attachedImages,
          timestamp: new Date().toISOString(),
        };
      }));
      
      console.log('üíæ Ï∫êÎ¶≠ÌÑ∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', newCharacters);
      setGeneratedCharacters([...generatedCharacters, ...newCharacters]);
      
      addNotification({
        type: 'success',
        title: 'ÏÉùÏÑ± ÏôÑÎ£å',
        message: `${newCharacters.length}Í∞úÏùò Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§. Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.`,
      });

      return newCharacters;
    } catch (error) {
      console.error('‚ùå Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ± Ïò§Î•ò:', error);
      
      let errorMessage = 'Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      if (error instanceof Error) {
        if (error.message.includes('ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§')) {
          errorMessage = 'Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÎÑàÎ¨¥ ÍπÅÎãàÎã§')) {
          errorMessage = 'Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™ÖÏù¥ ÎÑàÎ¨¥ ÍπÅÎãàÎã§. 1000Ïûê Ïù¥ÎÇ¥Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('Î∂ÄÏ†ÅÏ†àÌïú ÎÇ¥Ïö©')) {
          errorMessage = 'Î∂ÄÏ†ÅÏ†àÌïú ÎÇ¥Ïö©Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Îã§Î•∏ ÎÇ¥Ïö©ÏúºÎ°ú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§')) {
          errorMessage = 'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌîÑÎ°¨ÌîÑÌä∏Î•º Îçî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî.';
        } else if (error.message.includes('API ÌÇ§')) {
          errorMessage = 'Google AI API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÑ§Ï†ïÏóêÏÑú API ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('ÏÇ¨Ïö©Îüâ ÌïúÎèÑ')) {
          errorMessage = 'API ÏÇ¨Ïö©Îüâ ÌïúÎèÑÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('ÏïàÏ†Ñ Ï†ïÏ±Ö')) {
          errorMessage = 'ÏûÖÎ†• ÎÇ¥Ïö©Ïù¥ ÏïàÏ†Ñ Ï†ïÏ±ÖÏóê ÏúÑÎ∞∞Îê©ÎãàÎã§. Îã§Î•∏ ÎÇ¥Ïö©ÏúºÎ°ú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('503') || error.message.includes('UNAVAILABLE')) {
          errorMessage = 'Google AI ÏÑúÎπÑÏä§Í∞Ä ÏùºÏãúÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        } else if (error.message.includes('ÎÑ§Ìä∏ÏõåÌÅ¨')) {
          errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§. Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
        } else {
          errorMessage = `Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error.message}`;
        }
      }
      
      addNotification({
        type: 'error',
        title: 'ÏÉùÏÑ± Ïã§Ìå®',
        message: errorMessage,
      });
      return null;
    }
  };

  const handleRegenerateCharacter = async (characterId: number) => {
    try {
      const character = generatedCharacters.find(c => c.id === characterId);
      if (!character) return;

      let imagePrompt = character.description;
      if (generatedProjectData?.imagePrompts?.character) {
        imagePrompt = generatedProjectData.imagePrompts.character;
      }
      
      const numberOfImages = imageOptions?.numberOfImages || 1;
      const imageResult = await googleAIService.generateCharacterImage(imagePrompt, aspectRatio, numberOfImages);
      
      setGeneratedCharacters((prev: any[]) =>
        prev.map((char: any) =>
          char.id === characterId
            ? { ...char, image: imageResult, timestamp: new Date().toISOString() }
            : char
        )
      );
      
      addNotification({
        type: 'success',
        title: 'Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'Ï∫êÎ¶≠ÌÑ∞Í∞Ä Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      console.error('Ï∫êÎ¶≠ÌÑ∞ Ïû¨ÏÉùÏÑ± Ïò§Î•ò:', error);
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'Ï∫êÎ¶≠ÌÑ∞ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleDeleteCharacter = (characterId: number) => {
    setGeneratedCharacters((prev: any[]) => {
      const characterToDelete = prev.find((char: any) => char.id === characterId);
      if (characterToDelete?.imageStorageId) {
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§ÏóêÏÑúÎèÑ ÏÇ≠Ï†ú
        imageStorageService.deleteImage(characterToDelete.imageStorageId);
      }
      
      const filtered = prev.filter((char: any) => char.id !== characterId);
      console.log('Ï∫êÎ¶≠ÌÑ∞ ÏÇ≠Ï†ú:', { ÏÇ≠Ï†úID: characterId, ÏõêÎ≥∏Ïàò: prev.length, ÏÇ≠Ï†úÌõÑÏàò: filtered.length });
      return filtered;
    });
    addNotification({
      type: 'info',
      title: 'ÏÇ≠Ï†ú ÏôÑÎ£å',
      message: 'Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
    });
  };

  const handleGenerateBackground = async (backgroundInput: string, attachedImages: File[]) => {
    if (!backgroundInput.trim() && attachedImages.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'Î∞∞Í≤Ω ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÍ±∞ÎÇò Ïù¥ÎØ∏ÏßÄÎ•º Ï≤®Î∂ÄÌï¥Ï£ºÏÑ∏Ïöî.',
      });
      return null;
    }

    try {
      let imagePrompt = backgroundInput;
      if (generatedProjectData?.imagePrompts?.background) {
        imagePrompt = generatedProjectData.imagePrompts.background;
      } else if (generatedProjectData?.scenarioPrompt) {
        imagePrompt = generatedProjectData.scenarioPrompt;
      }
      
      const imageResults = await generateMultipleImagesWithAPI(imagePrompt, attachedImages, 'background');
      
      // Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÅÍ∞Å Î∞∞Í≤ΩÏúºÎ°ú Ï∂îÍ∞Ä (Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ï†ïÏ±Ö Ï†ÅÏö©)
      const newBackgrounds = await Promise.all(imageResults.map(async (imageResult, index) => {
        const backgroundId = Date.now() + index;
        
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§Ïóê Ï†ÄÏû•
        const storedImageId = await imageStorageService.storeImage(
          currentProjectId || 'default',
          'background',
          imageResult,
          {
            description: backgroundInput,
            attachedImages: attachedImages.length,
            generatedAt: new Date().toISOString()
          }
        );
        
        return {
          id: backgroundId,
          description: backgroundInput,
          image: imageResult,
          imageStorageId: storedImageId,
          attachedImages: attachedImages,
          timestamp: new Date().toISOString(),
        };
      }));
      
      setGeneratedBackgrounds([...generatedBackgrounds, ...newBackgrounds]);
      
      addNotification({
        type: 'success',
        title: 'ÏÉùÏÑ± ÏôÑÎ£å',
        message: `${newBackgrounds.length}Í∞úÏùò Î∞∞Í≤ΩÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`,
      });

      return newBackgrounds;
    } catch (error) {
      console.error('Î∞∞Í≤Ω ÏÉùÏÑ± Ïò§Î•ò:', error);
      addNotification({
        type: 'error',
        title: 'ÏÉùÏÑ± Ïã§Ìå®',
        message: `Î∞∞Í≤Ω ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      return null;
    }
  };

  const handleRegenerateBackground = async (backgroundId: number) => {
    try {
      const background = generatedBackgrounds.find(bg => bg.id === backgroundId);
      if (!background) return;

      let imagePrompt = background.description;
      if (generatedProjectData?.imagePrompts?.background) {
        imagePrompt = generatedProjectData.imagePrompts.background;
      }
      
      const numberOfImages = imageOptions?.numberOfImages || 1;
      const imageResult = await googleAIService.generateBackgroundImage(imagePrompt, aspectRatio, numberOfImages);
      
      setGeneratedBackgrounds((prev: any[]) =>
        prev.map((bg: any) =>
          bg.id === backgroundId
            ? { ...bg, image: imageResult, timestamp: new Date().toISOString() }
            : bg
        )
      );
      
      addNotification({
        type: 'success',
        title: 'Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'Î∞∞Í≤ΩÏù¥ Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      console.error('Î∞∞Í≤Ω Ïû¨ÏÉùÏÑ± Ïò§Î•ò:', error);
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'Î∞∞Í≤Ω Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleDeleteBackground = (backgroundId: number) => {
    setGeneratedBackgrounds((prev: any[]) => {
      const backgroundToDelete = prev.find((bg: any) => bg.id === backgroundId);
      if (backgroundToDelete?.imageStorageId) {
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§ÏóêÏÑúÎèÑ ÏÇ≠Ï†ú
        imageStorageService.deleteImage(backgroundToDelete.imageStorageId);
      }
      
      const filtered = prev.filter((bg: any) => bg.id !== backgroundId);
      console.log('Î∞∞Í≤Ω ÏÇ≠Ï†ú:', { ÏÇ≠Ï†úID: backgroundId, ÏõêÎ≥∏Ïàò: prev.length, ÏÇ≠Ï†úÌõÑÏàò: filtered.length });
      return filtered;
    });
    addNotification({
      type: 'info',
      title: 'ÏÇ≠Ï†ú ÏôÑÎ£å',
      message: 'Î∞∞Í≤ΩÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
    });
  };

  const handleGenerateSettingCut = async (settingCut: string, attachedImages: File[]) => {
    if (!settingCut.trim() && attachedImages.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'ÏÑ§Ï†ï Ïª∑ ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÍ±∞ÎÇò Ïù¥ÎØ∏ÏßÄÎ•º Ï≤®Î∂ÄÌï¥Ï£ºÏÑ∏Ïöî.',
      });
      return null;
    }

    try {
      let imagePrompt = settingCut;
      if (generatedProjectData?.imagePrompts?.setting) {
        imagePrompt = generatedProjectData.imagePrompts.setting;
      } else if (generatedProjectData?.scenarioPrompt) {
        imagePrompt = generatedProjectData.scenarioPrompt;
      }
      
      const imageResults = await generateMultipleImagesWithAPI(imagePrompt, attachedImages, 'setting');
      
      // Ïó¨Îü¨ Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÅÍ∞Å ÏÑ§Ï†ï Ïª∑ÏúºÎ°ú Ï∂îÍ∞Ä (Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Ï†ïÏ±Ö Ï†ÅÏö©)
      const newSettingCuts = await Promise.all(imageResults.map(async (imageResult, index) => {
        const settingCutId = Date.now() + index;
        
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§Ïóê Ï†ÄÏû•
        const storedImageId = await imageStorageService.storeImage(
          currentProjectId || 'default',
          'settingCut',
          imageResult,
          {
            description: settingCut,
            attachedImages: attachedImages.length,
            generatedAt: new Date().toISOString()
          }
        );
        
        return {
          id: settingCutId,
          description: settingCut,
          image: imageResult,
          imageStorageId: storedImageId,
          attachedImages: attachedImages,
          timestamp: new Date().toISOString(),
        };
      }));
      
      setGeneratedSettingCuts([...generatedSettingCuts, ...newSettingCuts]);
      
      addNotification({
        type: 'success',
        title: 'ÏÉùÏÑ± ÏôÑÎ£å',
        message: `${newSettingCuts.length}Í∞úÏùò ÏÑ§Ï†ï Ïª∑Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`,
      });

      return newSettingCuts;
    } catch (error) {
      console.error('ÏÑ§Ï†ï Ïª∑ ÏÉùÏÑ± Ïò§Î•ò:', error);
      addNotification({
        type: 'error',
        title: 'ÏÉùÏÑ± Ïã§Ìå®',
        message: `ÏÑ§Ï†ï Ïª∑ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Unknown error'}`,
      });
      return null;
    }
  };

  const handleRegenerateSettingCut = async (settingId: number) => {
    try {
      const settingCut = generatedSettingCuts.find(cut => cut.id === settingId);
      if (!settingCut) return;

      let imagePrompt = settingCut.description;
      if (generatedProjectData?.imagePrompts?.setting) {
        imagePrompt = generatedProjectData.imagePrompts.setting;
      }
      
      const numberOfImages = imageOptions?.numberOfImages || 1;
      const imageResult = await googleAIService.generateSettingCutImage(imagePrompt, aspectRatio, numberOfImages);
      
      setGeneratedSettingCuts((prev: any[]) =>
        prev.map((cut: any) =>
          cut.id === settingId
            ? { ...cut, image: imageResult, timestamp: new Date().toISOString() }
            : cut
        )
      );
      
      addNotification({
        type: 'success',
        title: 'Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'ÏÑ§Ï†ï Ïª∑Ïù¥ Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      console.error('ÏÑ§Ï†ï Ïª∑ Ïû¨ÏÉùÏÑ± Ïò§Î•ò:', error);
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'ÏÑ§Ï†ï Ïª∑ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleDeleteSettingCut = (settingId: number) => {
    setGeneratedSettingCuts((prev: any[]) => {
      const settingCutToDelete = prev.find((cut: any) => cut.id === settingId);
      if (settingCutToDelete?.imageStorageId) {
        // Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÏÑúÎπÑÏä§ÏóêÏÑúÎèÑ ÏÇ≠Ï†ú
        imageStorageService.deleteImage(settingCutToDelete.imageStorageId);
      }
      
      const filtered = prev.filter((cut: any) => cut.id !== settingId);
      console.log('ÏÑ§Ï†ï Ïª∑ ÏÇ≠Ï†ú:', { ÏÇ≠Ï†úID: settingId, ÏõêÎ≥∏Ïàò: prev.length, ÏÇ≠Ï†úÌõÑÏàò: filtered.length });
      return filtered;
    });
    addNotification({
      type: 'info',
      title: 'ÏÇ≠Ï†ú ÏôÑÎ£å',
      message: 'ÏÑ§Ï†ï Ïª∑Ïù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
    });
  };

  // Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± Í∏∞Îä•Îì§
  const handleRegenerateAllCharacters = async () => {
    if (generatedCharacters.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'Ïû¨ÏÉùÏÑ±Ìï† Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    try {
      const newCharacters = [];
      const numberOfImages = imageOptions?.numberOfImages || 1;
      for (const character of generatedCharacters) {
        const imageResult = await googleAIService.generateCharacterImage(character.description, aspectRatio, numberOfImages);
        newCharacters.push({
          ...character,
          image: imageResult,
          timestamp: new Date().toISOString(),
        });
      }
      
      setGeneratedCharacters(newCharacters);
      addNotification({
        type: 'success',
        title: 'Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'Î™®Îì† Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'Ï∫êÎ¶≠ÌÑ∞ Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleRegenerateAllBackgrounds = async () => {
    if (generatedBackgrounds.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'Ïû¨ÏÉùÏÑ±Ìï† Î∞∞Í≤ΩÏù¥ ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    try {
      const newBackgrounds = [];
      const numberOfImages = imageOptions?.numberOfImages || 1;
      for (const background of generatedBackgrounds) {
        const imageResult = await googleAIService.generateBackgroundImage(background.description, aspectRatio, numberOfImages);
        newBackgrounds.push({
          ...background,
          image: imageResult,
          timestamp: new Date().toISOString(),
        });
      }
      
      setGeneratedBackgrounds(newBackgrounds);
      addNotification({
        type: 'success',
        title: 'Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'Î™®Îì† Î∞∞Í≤ΩÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'Î∞∞Í≤Ω Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleRegenerateAllSettingCuts = async () => {
    if (generatedSettingCuts.length === 0) {
      addNotification({
        type: 'error',
        title: 'ÏûÖÎ†• ÌïÑÏöî',
        message: 'Ïû¨ÏÉùÏÑ±Ìï† ÏÑ§Ï†ï Ïª∑Ïù¥ ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    try {
      const newSettingCuts = [];
      const numberOfImages = imageOptions?.numberOfImages || 1;
      for (const cut of generatedSettingCuts) {
        const imageResult = await googleAIService.generateSettingCutImage(cut.description, aspectRatio, numberOfImages);
        newSettingCuts.push({
          ...cut,
          image: imageResult,
          timestamp: new Date().toISOString(),
        });
      }
      
      setGeneratedSettingCuts(newSettingCuts);
      addNotification({
        type: 'success',
        title: 'Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± ÏôÑÎ£å',
        message: 'Î™®Îì† ÏÑ§Ï†ï Ïª∑Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: 'Ïû¨ÏÉùÏÑ± Ïã§Ìå®',
        message: 'ÏÑ§Ï†ï Ïª∑ Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
      });
    }
  };

  // Ï†ÄÏû• Í∏∞Îä•Îì§ (Ïã§Ï†ú Îã§Ïö¥Î°úÎìú)
  const handleSaveCharacter = (id: number) => {
    const character = generatedCharacters.find(char => char.id === id);
    if (!character || !character.image) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ï∫êÎ¶≠ÌÑ∞ Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    const filename = `character_${id}_${new Date().toISOString().slice(0, 10)}.jpg`;
    const success = downloadBase64Image(character.image, filename);
    
    if (success) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `Ï∫êÎ¶≠ÌÑ∞ Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§: ${filename}`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleSaveBackground = (id: number) => {
    const background = generatedBackgrounds.find(bg => bg.id === id);
    if (!background || !background.image) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    const filename = `background_${id}_${new Date().toISOString().slice(0, 10)}.jpg`;
    const success = downloadBase64Image(background.image, filename);
    
    if (success) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§: ${filename}`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleSaveSettingCut = (id: number) => {
    const settingCut = generatedSettingCuts.find(cut => cut.id === id);
    if (!settingCut || !settingCut.image) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'ÏÑ§Ï†ï Ïª∑ Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    const filename = `setting_cut_${id}_${new Date().toISOString().slice(0, 10)}.jpg`;
    const success = downloadBase64Image(settingCut.image, filename);
    
    if (success) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `ÏÑ§Ï†ï Ïª∑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§: ${filename}`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleSaveAllCharacters = () => {
    if (generatedCharacters.length === 0) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ï†ÄÏû•Ìï† Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    let successCount = 0;
    const date = new Date().toISOString().slice(0, 10);
    
    generatedCharacters.forEach((character, index) => {
      if (character.image) {
        const filename = `character_${character.id}_${date}.jpg`;
        if (downloadBase64Image(character.image, filename)) {
          successCount++;
        }
      }
    });

    if (successCount > 0) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `${successCount}Í∞úÏùò Ï∫êÎ¶≠ÌÑ∞ Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ï∫êÎ¶≠ÌÑ∞ Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleSaveAllBackgrounds = () => {
    if (generatedBackgrounds.length === 0) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ï†ÄÏû•Ìï† Î∞∞Í≤ΩÏù¥ ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    let successCount = 0;
    const date = new Date().toISOString().slice(0, 10);
    
    generatedBackgrounds.forEach((background, index) => {
      if (background.image) {
        const filename = `background_${background.id}_${date}.jpg`;
        if (downloadBase64Image(background.image, filename)) {
          successCount++;
        }
      }
    });

    if (successCount > 0) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `${successCount}Í∞úÏùò Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  const handleSaveAllSettingCuts = () => {
    if (generatedSettingCuts.length === 0) {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'Ï†ÄÏû•Ìï† ÏÑ§Ï†ï Ïª∑Ïù¥ ÏóÜÏäµÎãàÎã§.',
      });
      return;
    }

    let successCount = 0;
    const date = new Date().toISOString().slice(0, 10);
    
    generatedSettingCuts.forEach((settingCut, index) => {
      if (settingCut.image) {
        const filename = `setting_cut_${settingCut.id}_${date}.jpg`;
        if (downloadBase64Image(settingCut.image, filename)) {
          successCount++;
        }
      }
    });

    if (successCount > 0) {
      addNotification({
        type: 'success',
        title: 'Ï†ÄÏû• ÏôÑÎ£å',
        message: `${successCount}Í∞úÏùò ÏÑ§Ï†ï Ïª∑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.`,
      });
    } else {
      addNotification({
        type: 'error',
        title: 'Ï†ÄÏû• Ïã§Ìå®',
        message: 'ÏÑ§Ï†ï Ïª∑ Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
    }
  };

  return {
    // ÌïµÏã¨ ÏÉùÏÑ± Ìï®ÏàòÎì§
    generateImageWithAPI,
    handleGenerateCharacter,
    handleRegenerateCharacter,
    handleDeleteCharacter,
    handleGenerateBackground,
    handleRegenerateBackground,
    handleDeleteBackground,
    handleGenerateSettingCut,
    handleRegenerateSettingCut,
    handleDeleteSettingCut,
    // Ï†ÑÏ≤¥ Ïû¨ÏÉùÏÑ± Í∏∞Îä•Îì§
    handleRegenerateAllCharacters,
    handleRegenerateAllBackgrounds,
    handleRegenerateAllSettingCuts,
    // Ï†ÄÏû• Í∏∞Îä•Îì§
    handleSaveCharacter,
    handleSaveBackground,
    handleSaveSettingCut,
    handleSaveAllCharacters,
    handleSaveAllBackgrounds,
    handleSaveAllSettingCuts,
  };
};
